\ 0 TO MM_SIZE
REQUIRE DoDTST ~mak/OptTr.f 
REQUIRE .TOP0 ~mak/DOP.F 
: DTSTON   ['] DoDTST TO DTST ; IMMEDIATE
: DTSTOFF   ['] DROP TO DTST ; IMMEDIATE
REQUIRE CASE-INS ~mak/lib/caseins.f 
CASE-INS ON
(*
444 CONSTANT  SOURCE_B_SIZE
 CREATE CUR_SOURCE_B  SOURCE_B_SIZE 255 + 1+ ALLOT
\ CUR_SOURCE_B  SOURCE_B_SIZE 255 + 1+ MH. MH. \  ERASE

: SOURCE_B-SET  ( adr len -- )
 DUP 1+ >R  CUR_SOURCE_B  CUR_SOURCE_B  R@ + SOURCE_B_SIZE R> - CMOVE>
CUR_SOURCE_B $! ;

: SOURCE-SAVE SOURCE SOURCE_B-SET ;

: SOURCE_B-FREE  ( -- )
 CUR_SOURCE_B COUNT + CUR_SOURCE_B
 SOURCE_B_SIZE CUR_SOURCE_B C@ - 255 +  CMOVE ;

: SOURCE-REST  CUR_SOURCE_B COUNT SOURCE! SOURCE_B-FREE ;

: DUPCOUTSET DUP TO H-STDOUT ;
: COUTRESTORE 1 TO H-STDOUT ;
*)

\ REQUIRE REQUIRE_AL Meta_x86_64/SRC/mlist.f 
 REQUIRE INCLUDED_AL	~mak/lib/THERE/mlist.f 

\ : CONS CREATE , DOES> @ ; 5 CONS FIVE

\ EOF
\ REQUIRE_AL qwerr sm64.4 

REQUIRE [IF] ~mak/CompIF4.f
REQUIRE [IFNDEF] ~nn/lib/ifdef.f
REQUIRE NUMBER? ~mak/lib/fpcnum.f
REQUIRE [AGAIN] ~mak/lib/twopass.f 

 REQUIRE_AL CODE Meta_x86_64/SRC/gasm64.4 

\ FLOAD ~mak/gasm64/gasm64.4 
CODE ATST
	add     -0x08(%rbp),%rax
	or      -0x08(%rbp),%rax
	adc     -0x08(%rbp),%rax
	sbb     -0x08(%rbp),%rax
	AND     -0x08(%rbp),%rax
	sub     -0x08(%rbp),%rax
	xor     -0x08(%rbp),%rax
	cmp     -0x08(%rbp),%rax
	RET

END-CODE

CODE BTST
\        CALL	' DUP
	lea	0x-08(%rbp),%rbp
	mov	%rax,0x00(%rbp)

	MOV	$-1,%Eax
\	$66 C, $35 C, -1 W, \          	xor    $0x0,%ax
	RET
END-CODE



.( prass any key. Esc - without trace continue  )
77 VALUE VAVA
VARIABLE VVV
: TEST
  dtston
  1000000 2 . 3 . 5
  DO DUP DUP * I  <
    IF 1+
    THEN 1 OVER 1+ 3
    DO   J I MOD 0=
      IF 1- LEAVE
      THEN 2 dtston
    +LOOP
    IF I .
    THEN 2
  +LOOP DROP ;


\EOF

