CR .(   ACCEPT2 LOAD )
REQUIRE CASE ~mak\case.f 

[IFNDEF] BLANK	: BLANK  ( addr len -- )		BL FILL ;	[THEN]
[IFNDEF] BOUNDS	: BOUNDS ( addr len -- addr+len addr )	OVER + SWAP ;	[THEN]

?CREATE      CLIPBOARD 0 , VIEW-SIZE ALLOT

: ACC_INSERT ( ADDR ADDR1 -- ADDR ADDR1 )
  2DUP U> 0= IF BREAK
   GETXY 2>R
  2DUP - >R DUP DUP 1+ R@ MOVE
   DUP R>  TYPE  1 EMIT
  2R> SETXY
;

: ACC_DELETE ( ADDR ADDR1 -- ADDR ADDR1 )
  2DUP U> 0= IF BREAK
   GETXY 2>R
  2DUP - >R DUP 1+ OVER R@ MOVE
   DUP R>
\   GETXY 2>R
\ 1 1 SETXY DUP . 2DUP TYPE ." $"
\  2R> SETXY
 TYPE  1 EMIT
  2R> SETXY
;

: ACC_EMIT (  SA EA  addr c --  SA EA  addr+1 ) 
  >R
  ACC_INSERT   
  R@ EMIT 
  R> OVER C! 1+ ;

: ACC_LEFT (  SA EA A --  SA EA A' )
 >R OVER R>  TUCK U<
 IF 1- GETXY SWAP 1- SWAP SETXY THEN ;

: ACC_HOME (  SA EA A --  SA EA SA )
  SWAP >R
  OVER -  >R
    GETXY SWAP R> - SWAP SETXY    \  0 ?DO 8 EMIT LOOP
  R> OVER
;

: ACC_TYPE (  SA EA A  addr len -- SA EA A1 )
  BOUNDS  DO I C@  ACC_EMIT LOOP ;

: ACC_END  (  SA EA A --  SA EA A' )
  >R
  DUP >R
  BEGIN 1- 2DUP U> 0= IF DUP C@ BL <> 
		ELSE TRUE
		THEN
  UNTIL 1+
  R> SWAP \  SA EA SA
  DUP R> -
  GETXY -ROT + SWAP SETXY
;

1 4 LSHIFT CONSTANT ACC_NUM

CREATE	LAST_STP_PULL 0x101 ACC_NUM * ALLOT
	LAST_STP_PULL 0x101 ACC_NUM * ERASE

VARIABLE COUNT_STP 

: LAST_STP ( -- addr )
 LAST_STP_PULL COUNT_STP @ ACC_NUM 1- AND 0x101 * + ;

: GET_LAST_STP
 ACC_HOME
 2DUP TUCK - BLANK
 DROP >R
                     LAST_STP COUNT 2DUP TYPE
                     >R OVER R> R@ UMIN CMOVE R> \ DROP DUP
                     OVER  LAST_STP C@ +
  ACC_INSERT
;

: DO1B
 0xFF AND \ KEY
  CASE
	[CHAR] K OF ACC_LEFT  ENDOF
	[CHAR] M OF  GETXY SWAP 1+ SWAP SETXY 1+ ENDOF
	[CHAR] H OF -1 COUNT_STP +! GET_LAST_STP    ENDOF
	[CHAR] P OF  1 COUNT_STP +! GET_LAST_STP    ENDOF
	[CHAR] G OF ACC_HOME
\  KEY? 0=	IF BREAK
\			KEY DUP [CHAR] ~ <> IF ACC_EMIT BREAK DROP
		 ENDOF
	[CHAR] S OF ACC_DELETE  ENDOF
	[CHAR] O OF ACC_END
    KEY? 0=	IF BREAK
\			KEY DUP [CHAR] ~ <> IF ACC_EMIT BREAK DROP
		 ENDOF

	[CHAR] R OF  \ imsert 
			ID_SHIFT@
			IF CLIPBOARD? IF CLIPBOARD@ 20 MIN ACC_TYPE THEN THEN
	ENDOF
\   0xE0 ACC_EMIT ACC_EMIT 0
 ENDCASE ;

: ACCEPT2_ ( c-ar +n1 -- c-addr EA A )
\   GETXY NIP COLS - NEGATE UMIN
	COLS 1- UMIN
   2DUP BLANK
   OVER + 1- OVER      \ SA EA A
   BEGIN GKEY          \ SA EA A C
\ ." {"   DUP H. ." }"
     DUP 0xA = OVER 0xD = OR 0= 
   WHILE        CASE
	DUP 0x100 AND	IF DO1B   ENDOF
	8	OF ACC_LEFT ACC_DELETE ENDOF
	0xF	OF  S" FMENU" ACC_TYPE ENDOF \ Ctr-O
               ACC_EMIT
              0 ENDCASE  OVER UMIN \ SA EA A
   REPEAT                         \ SA EA A C
   DROP
   ;

: ACCEPT2 ( c-addr +n1 -- +n2 ) \ 94
  ACCEPT2_
  ACC_END NIP
  OVER - DUP IF 2DUP  LAST_STP $!  1 COUNT_STP +! THEN
  NIP CR
;


\ ' ACCEPT2 TO ACCEPT

S" GIC"  LAST_STP $!  1 COUNT_STP +!
S" TIV"  LAST_STP $!  1 COUNT_STP +!

S" TT.F"  LAST_STP $!  1 COUNT_STP +!

S"  20 TO VIEW#Y0  10 TO VIEW#X0  EDIT TT.F"  LAST_STP $!  1 COUNT_STP +!

\ EOF

CREATE VVVV  100 ALLOT

: ACCTST
 CR ." ACCTST="

 VVVV DUP 22  ACCEPT2  CR ." <"  TYPE ." >" CR
;
